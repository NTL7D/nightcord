// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  imageUrl  String   @db.Text
  email     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         String   @id @default(uuid())
  name       String
  imageUrl   String   @db.Text
  inviteCode String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members  Member[]
  channels Channel[]

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  messages              Message[]
  conversationInitiated Conversation[]  @relation("MemberOne")
  conversationRecieved  Conversation[]  @relation("MemberTwo")
  directMessages        DirectMessage[]

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  messages Message[]

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId  String
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member    Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
}

model Conversation {
  id String @id @default(uuid())

  directMessages DirectMessage[]

  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberOneId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  memberTwoId String

  @@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId       String
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
}
